main:   
    functia main primeste argumentele argc si agrv[] pentru a lucra cu parametrii in linia de comanda.
    verificam daca al 2-lea parametru este "123" pentru a incepe rulearea task-ului 1, care primeste ca argument primul parametru din linia de comanda. Calea input file-ului.

Task1:
    Scriu numele fisierului. Cand intalnesc caracterul 'b' in path-ul input file-ului, voi stii ca urmeaza cuvantul boardxx, din acesta iau ultimele 2 caractere, adica numarul board-ului.
    Deschid fisierele. Iau marimea fisierului de input in variabila fsize, dupa care pun fisierul in char* stringJson pentru a-l parsa folosind cJSON.
    Am folosit cJSON pentru ca mi s-a parut nu doar cea mai usor de utilizat din cele doua parsere recomandate, dar si pentru ca a fost mai comod de instalat, doar a trebuit sa copiez cele
    doua fisier .c si .h in src. 
    Dupa ce parsez si preiau itemele din fisierul .json, le scriu in oridnea corecta si pe numarul de biti corespunzator in fisierul de output. La scrierea bitmap-ului, citesc bitii din
    json in ordinea care trebuie pentru ca imaginea sa nu fie inversata, incep cu ultima linie, prima coloana si citesc de la stanga la dreapta, de jos in sus. cand ajung la 219 biti 
    scrisi, plasez cei doi biti de padding, folosesc contorul 'n' pentru a tine cont de bitii scrisi.

Task2:
    Task1 returneaza un char* care semnifica numele fisierului de output. Acesta, este primit ca argument de catre task2 deoarece este fisierul de input al acestui task.
    Deschid ambele fisiere si copiez header-ul input-ului in output, acesta fiind acelasi.
    fiecare numar are in latime 5 pixeli, (15 biti). Pe fiecare linie avem 73 de pixeli, iar numerele incep de pe coloanele 3, 11, 19, 27, 35, 43, 51 ,59, 67.
    Plasez numerele acestor coloane intr-un vector, restul coloanelor, care nu contin numere, le plasez in alt vector.
    Scriu imaginea rand cu rand. Testez fiecare pixel(coloana) de pe fiecare rand. Daca acesta nu reprezinta un numar, pur si simplu il scriu, daca acesta reprezinta un numar voi lua 
    intr-un buffer urmatorii 5 pixeli (15 biti) si ii voi scrie in oglinda, bitul 5 (b[12]b[13]b[14]), bitul 4 (b[9]b[10]b[11]), bitul 3 (b[6]b[7]b[8]) etc.
    La finalul fiecarul rand, scriu padding-ul.

readNumber: 
    Functia readNumber primeste fisierul, numarul coloanei si numarul randului (9x9, nu 73x73) si returneaza numarul int din acea locatie. Pentru inceput vrem sa ajungem in dreptul
    numarului dorit. Ignoram primii 54 de biti de padding dupa care ignoram bitii necesari pentru a ajunge la numarul care trebuie citit (informatii despre acest calcul sunt si in 
    comantariile de la functie). Salvam pozitia curenta in ptr si incepem sa verificam numerele. In cazul in care patratul este gol, returnam 0. Verificam daca ultimul pixel de pe prima
    linie (marginea de jos a cifrei) este egal cu al doilea pixel de pe a doua linie. Nicio cifra nu are acesti doi pixeli egali (de aceeas culoare) asadar putem returna 0.
    Observam ca doar numerele 1,4 si 7 au primul si ultimul pixel de pe prima linie diferiti. In continuare, doar 4 are primii doi pixeli de pe ultima linia (marginea de sus) diferiti.
    Putem returna 4. Diferenta dintre 1 si 7 sunt ulimii 2 pixeli de pe ultima linie, 1 ii are diferiti, 7 ii are egali.
    Observam ca doar 6 si 8 au primul si ultimul pixel de pe randul 2 egal, cu diferenta ca 8 ii are si pe cei de pe penultimul rand.
    Mai departe, 9 este singura cifra ca are mai ramas neverificata si are primul si ultimul pixel de pe penultima linie egali, il putem returna.
    2,3 si 5: 3 are primii pixeli de pe linia 2 si 4 egali. dintre 5 si 2, 5 are primii doi pixeli de pe a doua linie egali deci il putem returna. Daca am ajuns in acest punct in functie
    returnam 2 deorece e singura cifra ramasa.

Task3:
    Dupa ce ii scriem numele si primele randuri ale json-ului folosim functia readNumber pentru a verifica fiecare linie, fiecare coloana si fiecare patrat 3x3.
    In toate verificarile ne uitam dupa cifre duplicate. In prima verificare (cea a liniilor) ne uitam si dupa spatii libere, aceasta verificare se face doar odata deoarece deja trecem
    odata prin tabla de joc, nu mai are rost sa verificam pentru spatii goale si la urmatoarele teste. 
    Daca tabla trece toate 3 verificarile, atunci printam win, in caz contrar, printam loss.
    
writeNumber:
    Scrie numarul primit ca argument la linia si coloana primita. buffer-ul buff primeste {255,0,255} pentru un pixel de culoarea magenta. Depinzand de cifra primita, scriem pixel cu pixel
    noul numar

Task4: 
    Scriem tabla de sudoku cu ajutorul functiei readNumber intr-o matrice. Citim matricea prima oara rand cu rand dupa care coloana cu coloana. Daca citim un 0 (loc liber in tabela de joc)
    atunci retinem coordonatele i,j ale acestui numar. In cazul in care este doar un 0 pe aceasta linie/coloana, atunci il schimbam, in matrice, cu numarul (45 - suma cifrelor de pe linie/col).
    De asemenea, scriem numarul si in imaginea .bmp folosind writeNumber.

