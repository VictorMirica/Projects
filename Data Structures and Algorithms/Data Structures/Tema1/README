Functii pentru lista dubla generica (functiiLDG.c):
    
        Functia InsLG:
    Primeste ca parametru o lista si elementul ce trebuie introdus in ea. Aceasta functie introduce elementul la finalul listei. Dupa ce se face
    alocarea celulei si se atribuie campurilor pre si urm valorile necesare, se face un test pentru a vedea daca lista este goala si se continua
    introducerea adecvata
        Functia InsBeforeLG:
    Primeste ca parametrii o lista, elementul ce trubie introdus si elementul inaintea caruia se va face introducerea. Dupa alocarea celulei 
    se va face un test in cazul in care elementul trebuie introdus inaintea primului element (la inceputul listei) dupa care, inca un test in cazul
    in care lista are un singur element.
        Functia AfiL:
    Primeste ca parametrii lista, functia de afisare a elementelor din lista, si fisierul unde trebuie scrisa afisarea. Aceasta functie parcurge
    lista si afiseaza toate elementele din ea in ordine, pe un singur rand. In cazul in care lista este goala, aceasta va scrie "VIDA"

Functii pentru Tabela Hash (functiiTH.c):

        Functia IniTH:
    Aceasta functie initializeaza tabela hash, ea primeste ca argumente numarul de bucket-uri (M) si functia de hash. Functia aloca memorie pentru 
    tabela si pentru vectorul de liste, dupa care atribuie campurile structurii (M is fh);
        Functia AfiTH:
    Primeste ca parametrii o tabela hash, o functie de afisare si fisierul in care trebuie facuta afisarea. Functie parcurge vectorul de liste a tabelei hash,
    in cazul in care lista nu este NULL, se va scrie indicele ei, urmat de toate elementele din lista, afisate conform functiei de afisare.
        Functia AfiVal:
    Functia primeste ca parametrii o cheie, codul hash, tabela hash, functii de afisare si comparare si fisierul de scriere. Functia va cauta in lista cu indicele
    transmis prin argument "codHash" cheia primita ca argument. Daca cheia se afla in lista, va fi scrisa in fisier valoarea corespunzatoare cheii.
        Functia InsTH:
    Insereaza in tabela hash elementul e. Se afla codul hash corespunzator listei unde va fi introdus elementul. Se testeaza daca lista este NULL, caz in care
    inserarea se va face prin functia InsLG(), care insereaza elementul la finalul listei. In caz contrar, se parcurge lista pana cand se ajunge la un element cu cheia
    "mai mare" decat elementul dat ca argument sau pana la finalul listei. In cazul in care un element a fost gasit, 'e' va fi introdus inainte lui prin apelarea functiei
    InsBeforeLG().
        Functia DelVal:
    Aceasta functie elimina un element dintr-o lista, bazat pe cheia primita ca argument. Alte argumente primite vor fi: codHash (calculat inainte de apelarea functiei, 
    deoarece trebuie sa stim cheia ca sa putem apela functia), tabela hash, functii de eliberarea si de comparare. Dupa ce se determina lista in care se afla elementul, aceasta
    va fi parcursa pentru a-i determina pozitia. Dupa asta, se vor face modificarile necesare astfel incat sa fie pastrata integritatea listei. Dupa ce toate legaturile necesare
    au fost schimbate, apelam functia de eliberare pentru campul informatiei elementul si functia free() pentru eliberarea celulei.
        Functia FindKey:
    Foarte simila cu functia AfiVal(), doar ca, in loc sa afisam valoarea corespunzatoare cheii primite ca argument, afisam True, daca aceasta se afla in tabela hash,
    Flase in caz contrar
        Functia DistrugeTH:
    Functia de eliberare a memoriei tabelei hash, apelata la finalul programului. Parcurgem vectorul de liste (de la indicele 0 la M-1), in cazul in care lista nu este NULL
    incepem eliberarea ei prin memorarea ultimul element din lista (l->pre)(Deoarece in curand va trebui sa facem o comparatie cu acest element, dar l va fi deja eliberat).
    Pentru fiecare element din lista, vom elibera campul info si celula sa. Dupa ce tot vectorul a fost eliberat, ramane doar sa eliberam v si h, si sa ii atribuim lui h NULL.

Functiile din main si parcurgerea programului(main.c):
        Functia codHash:
    Caluleaza codul hash. Aduna codul ASCII al fiecarei litere si returneaza restul sumei la numarul de bucket-uri (M).
        Functia printValue si functia printKey:
    Primesc ca argument un void* si fisierul unde se va face scrierea. void* va primi cast la tipul TReg*, structura <cheie, valoare> cu care vom lucra. Aceastea scriu 
    in fisier valoarea, respectiv cheia elementului primit.
        Functia hasKey:
    Primeste doua elemente ca argument, functie de comparare. Primul element este un char* , al 2-lea este un TReg*. Dupa casturile necesare, functia va returna 1 daca cheia 
    structurii este identica cu stringul. 0 in caz contrar.
        Functia cmpReg:
    Primeste doua elemente, functie de comparare. Ambele elemente vor fi de tipul TReg*. Aceasta functie este folosita pentru a indica unde trebuie introdus un element.
    Aceasta va returna 1 in cazul in care cele doua elemente au unul dintre campuri egale, caz in care acesta urmeaza sa nu fie introdus in lista. 
    Functia returneaza 2 daca primul element are campul cheie mai mare decat campul cheie celui de-al 2-lea element. Daca cheia elementului 2 este mai mare, se va returna 0.
        Functia main:
    Pentru rularea programului, acesta trebuie sa primeasca in linia de comanda, pe langa numele executabilului, alte 3 argumente: numarul de bucket-uri, fisierul de intrare
    si fisierul de iesire. In cazul in care programul nu este executat corect (argc != 4). Se va afisa un mesaj dupa care executarea se va termina. 
    Se atribuie variabilei M primul argument primit in linia de comanda, acesta este transformat din string in int prin functia atoi(). Se va initia tabela hash.
    Se vor deschide cele doua fisiere. Se va citi fisierul de intrare, linie cu linie. Inainte de apelarea funcitiilor corespunzatoare comenzii, se vor atribui 
    variabilelor char* comanda, key si val tokenii respectivi din linia citita. Nu toate liniile vor avea pe langa comanda, key si val, asadar, la inceputul citirii
    vom initializa trei variabile cu 0, in cazul in care linia contine pe langa comanda, key val sau ambele, acestor variabile li se va atribui 1, la final, daca 
    variabila respectiva tripletului (comanda,key,val) este 1, putem elibera fara problema char* respectiv. Dupa ce terminam de citit linia, comparam variabila "comanda"
    cu comenzile posibile: (get, remove, find, print, print_bucket), si se vor apela functiile corespuzatoare:
    (AfiVal(), DelVal(), FindKey(), AfiTH(), AfiL()). In unele cazuri, precum get sau find, vor fi scrise si spatii sau '\n' in fisierul de iesire, pentru indentare.
    in cazul print_bucket, inainte de a apela functia, verificam daca argumentul care urmeaza comanda (key), este un numar mai mic decat nuamrul maxim de bucket-uri.
    In final, se vor elibera cele trei valori char*: comanda, key si val. Se va elibera variabila folosita pentru citirea liniilor (line), se vor inchide fisierele si 
    se va distruge tabela hash prin apelarea functiei DistrugeTH().

    

         
    
